version: "2.1"
volumes:
  grafana:
  postgres:
services:
  # The opentelemetry-collector batches and processes traces sent to it.
  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib
    ports:
      - "12347:12345"
      - "12348:12348"
      - "6832:6832"
      - "55679:55679"
    volumes:
      - ./otel/otel.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]

  # The Grafana dashboarding server.
  grafana:
    image: grafana/grafana:main
    volumes:
      - "./grafana/definitions:/var/lib/grafana/dashboards"
      - "./grafana/provisioning:/etc/grafana/provisioning"
    ports:
      - "3000:3000"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph traceqlSearch correlations traceQLStreaming metricsSummary traceqlEditor
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true

  # This creates a writeable Tempo data source and a couple of correlations.
  # NOTE: This relies on the Tempo data source not existing at first start, should you delete
  #       the Tempo data source and re-run this service (via a `docker compose up`), extra
  #       copies of correlations will be generated!
  grafana_api_data:
    build: ./curl
    depends_on:
      - grafana


  # The API server microservice.
  # It writes logs directly to the Loki service, exposes metrics for the Prometheus
  # service and sends traces to the Grafana opentelemetry-collector instance.
  rest-api:
    image: philipz/otel-logback:agent
    ports:
      - "8080:8080"
    depends_on:
      - opentelemetry-collector
    environment:
      - OTEL_INSTRUMENTATION_RUNTIME_METRICS_ENABLED=true
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_ENABLED=true
      - JAVA_TOOL_OPTIONS=-javaagent:/otel-auto-instrumentation-java/javaagent.jar
      - OTEL_SERVICE_NAME=rest-api
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://opentelemetry-collector:4317
      - OTEL_PROPAGATORS=tracecontext,baggage,b3
      - OTEL_TRACES_SAMPLER=parentbased_traceidratio
      - OTEL_TRACES_SAMPLER_ARG=0.25

  # The Tempo service stores traces send to it by Grafana opentelemetry-collector, and takes
  # queries from Grafana to visualise those traces.
  tempo:
    image: grafana/tempo:2.2.0
    ports:
      - "3200:3200"
      - "4317:4317"
      - "55680:55680"
      - "55681:55681"
      - "14250:14250"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - "./tempo/tempo.yaml:/etc/tempo.yaml"

  # The Loki service stores logs sent to it, and takes queries from Grafana
  # to visualise those logs.
  loki:
    image: grafana/loki:2.8.3
    ports:
      - "3100:3100"

  mimir:
    image: grafana/mimir:2.9.0
    command: ["-ingester.native-histograms-ingestion-enabled=true", "-config.file=/etc/mimir.yaml"]
    ports:
      - "9009:9009"
    volumes:
      - "./mimir/mimir.yaml:/etc/mimir.yaml"
